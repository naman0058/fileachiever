<% include ./header.ejs %>
<script src="https://cdn.tailwindcss.com"></script>
<script>
  tailwind.config = {
    theme: {
      extend: {
        colors: {
          brandOrange: '#F17F23',
          brandBlue: '#2A47FF'
        },
        fontFamily: {
          sans: ['system-ui', 'Arial', 'sans-serif']
        }
      }
    }
  }
</script>
<style>
  .badge { @apply px-2 py-0.5 rounded bg-gray-100 text-sm; }
  .pill { @apply px-3 py-0.5 rounded-full text-xs bg-indigo-100 font-medium; }
  .ambassador-row { @apply bg-gray-50 font-semibold; }
</style>

<div class="content-body p-6 mt-5 bg-gray-50 min-h-screen font-sans">

  <h2 class="text-2xl font-bold text-brandBlue mb-4">Pending Benefits <span class="text-sm text-gray-500">(Eligible & Unclaimed)</span></h2>

  <div class="flex items-center gap-4 mb-6">
    <input id="filterInput" type="search" placeholder="Search ambassador by name or number..."
           class="w-80 px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-brandOrange focus:border-brandOrange" />
    <span id="totalCount" class="text-sm text-gray-600"></span>
  </div>

  <div class="overflow-x-auto">
    <table class="min-w-full divide-y divide-gray-200 text-sm">
      <thead class="bg-brandOrange text-white">
        <tr>
          <th class="px-4 py-2 text-left">Ambassador</th>
          <th class="px-4 py-2 text-left">Verified Days</th>
          <th class="px-4 py-2 text-left">Benefit</th>
          <th class="px-4 py-2 text-left">Phase</th>
          <th class="px-4 py-2 text-left">Threshold</th>
          <th class="px-4 py-2 text-left">Action</th>
          <th class="px-4 py-2 text-left">Preview</th>
          <th class="px-4 py-2 text-left">Generate</th>


        </tr>
      </thead>
      <tbody class="divide-y divide-gray-100" id="pendingTableBody">
        <% if (!groupedList.length) { %>
          <tr><td colspan="6" class="px-4 py-6 text-center text-gray-500">No pending benefits ðŸŽ‰</td></tr>
        <% } %>

        <% groupedList.forEach(g => { %>
         
          <% g.benefits.forEach(row => { %>
            <tr data-ambassador="<%= (g.name || '') %> <%= (g.number || '') %>">
              <td class="px-4 py-2 text-gray-600">
                <div><strong><%= g.name %></strong></div>
                <small class="text-gray-400"><%= g.number || '' %></small>
              </td>
              <td class="px-4 py-2"><span class="badge"><%= g.verified_days || 0 %> days</span></td>
              <td class="px-4 py-2"><%= row.title %></td>
              <td class="px-4 py-2"><%= row.phase %></td>
              <td class="px-4 py-2"><%= row.day_threshold %></td>
              <td class="px-4 py-2">
                <form class="claim-one-form" method="POST" action="/affiliate/benefits/claim">
                  <input type="hidden" name="brand_ambassador_id" value="<%= row.brand_ambassador_id %>"/>
                  <input type="hidden" name="benefit_id" value="<%= row.benefit_id %>"/>
                  <button type="submit" class="bg-brandOrange text-white px-3 py-1 rounded hover:bg-orange-600">Claim</button>
                </form>
              </td>
              <td>
                <a class="inline-flex items-center px-3 py-1.5 rounded border border-brandBlue text-brandBlue hover:bg-brandBlue/5"
   href="/affiliate/benefits/preview?ambassador_id=<%= row.brand_ambassador_id %>&benefit_id=<%= row.benefit_id %>"
   target="_blank">
  Preview
</a>
              </td>
              <td>
                <form class="inline-block" method="POST" action="/affiliate/benefits/generate" target="_blank">
  <input type="hidden" name="ambassador_id" value="<%= row.brand_ambassador_id %>">
  <input type="hidden" name="benefit_id" value="<%= row.benefit_id %>">
  <button class="ml-2 bg-brandOrange text-white px-3 py-1 rounded hover:bg-orange-600" type="submit">Generate PDF</button>
</form>
              </td>
            </tr>
          <% }) %>
        <% }) %>
      </tbody>
    </table>
  </div>

 


  <script>
    // Display total rows (benefit lines)
    (function updateTotal(){
      var tb = document.querySelector('#pendingTable tbody');
      var count = tb ? tb.querySelectorAll('tr:not(.ambassador-row)').length : 0;
      var el = document.getElementById('totalCount');
      if (el) el.textContent = count ? (count + ' pending benefit' + (count>1?'s':'')) : '';
    })();

    // Client-side filter by ambassador name/number
    document.getElementById('filterInput').addEventListener('input', function(e){
      const q = e.target.value.trim().toLowerCase();
      const rows = document.querySelectorAll('#pendingTable tbody tr');
      let visibleCount = 0;

      // First hide all
      rows.forEach(r => r.style.display = '');

      if (!q) {
        // no filter; ensure all rows show
        updateAmbassadorHeaderVisibility();
        return;
      }

      // Hide rows not matching
      rows.forEach(r => {
        const key = (r.getAttribute('data-ambassador') || '').toLowerCase();
        if (!key.includes(q)) {
          r.style.display = 'none';
        }
      });

      // Ensure header rows are shown if any of their benefit rows are visible
      updateAmbassadorHeaderVisibility();
    });

    function updateAmbassadorHeaderVisibility() {
      const body = document.querySelector('#pendingTable tbody');
      if (!body) return;
      const allRows = Array.from(body.children);
      const headers = allRows.filter(r => r.classList.contains('ambassador-row'));

      headers.forEach(h => {
        const idx = allRows.indexOf(h);
        // benefit rows for this ambassador until next header
        let hasVisibleChild = false;
        for (let i = idx + 1; i < allRows.length && !allRows[i].classList.contains('ambassador-row'); i++) {
          if (allRows[i].style.display !== 'none') {
            hasVisibleChild = true; break;
          }
        }
        h.style.display = hasVisibleChild ? '' : 'none';
      });
    }

    // Intercept single-claim to avoid full page reload (optional)
 
document.querySelectorAll('.claim-one-form').forEach(form => {
  form.addEventListener('submit', async function (e) {
    e.preventDefault();
    const btn = form.querySelector('button');
    btn.disabled = true;
    btn.textContent = 'Claiming...';

    try {
      const fd = new FormData(form);
      const body = new URLSearchParams(fd);  // <-- convert to urlencoded

      const res = await fetch(form.action, {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body
      });

      if (res.ok) {
        const row = form.closest('tr');
        const prev = row.previousElementSibling;
        row.remove();
        if (prev && prev.classList.contains('ambassador-row')) {
          let hasChild = false, next = prev.nextElementSibling;
          while (next && !next.classList.contains('ambassador-row')) { hasChild = true; break; }
          if (!hasChild) prev.remove();
        }
      } else {
        btn.disabled = false;
        btn.textContent = 'Claim';
        alert('Failed to claim. Please try again.');
      }
    } catch (err) {
      btn.disabled = false;
      btn.textContent = 'Claim';
      alert('Error: ' + (err?.message || 'unknown'));
    }
  });
});

    // Claim All for one ambassador (sequential POSTs)
    document.querySelectorAll('.claim-all-btn').forEach(btn => {
      btn.addEventListener('click', async function(){
        const ambId = btn.getAttribute('data-amb-id');
        const benefits = JSON.parse(btn.getAttribute('data-json') || '[]');
        if (!benefits.length) return;

        if (!confirm('Claim & send all pending benefits for this ambassador?')) return;

        btn.disabled = true;
        const original = btn.textContent;
        btn.textContent = 'Claiming...';

        try {
          for (let i = 0; i < benefits.length; i++) {
            const b = benefits[i];
            const fd = new FormData();
            fd.append('brand_ambassador_id', ambId);
            fd.append('benefit_id', b.benefit_id);
            console.log('form',fd)
            const res = await fetch('/affiliate/benefits/claim', { method: 'POST', body: fd });
            if (!res.ok) throw new Error('Failed on ' + (b.title || 'benefit') );
          }
          // Refresh the page or remove this ambassador block from DOM
          location.reload();
        } catch (err) {
          alert('Claim All failed: ' + (err?.message || 'unknown'));
          btn.disabled = false;
          btn.textContent = original;
        }
      });
    });
  </script>
</body>
</html>
<% include ./footer.ejs %>
